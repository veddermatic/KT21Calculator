{"version":3,"sources":["Ability.ts","DieProbs.ts","Attacker.ts","Die.ts","Defender.ts","components/IncDecSelect.tsx","Util.ts","components/AttackerControls.tsx","components/DefenderControls.tsx","components/CalcControls.tsx","components/ShootResultsDisplay.tsx","components/Credits.tsx","FinalDiceProb.ts","CalcEngineCommon.ts","CalcEngineShoot.ts","FightStrategy.ts","components/ShootSection.tsx","components/FighterControls.tsx","FightChoice.ts","components/FightOptionControls.tsx","FighterState.ts","CalcEngineFight.ts","components/FightResultsDisplay.tsx","FightOptions.tsx","components/FightSection.tsx","App.tsx","index.tsx"],"names":["Ability","rerollAbilities","Balanced","Ceaseless","Relentless","DieProbs","crit","norm","fail","this","Attacker","attacks","bs","normDmg","critDmg","mwx","apx","px","reroll","None","lethalx","rending","starfire","wounds","fnp","brutal","stun","stormShield","crits","norms","failHitProb","critSkill","critHitProb","normHitProb","rerollMultiplier","propName","value","copy","_","clone","setProp","withProp","normalDamage","criticalDamage","Die","range","PipMin","PipMax","rangeRight","pip","Defender","defense","save","invulnSave","coverSaves","chitin","Valid","usesInvulnSave","normSaveProb","relevantSave","failSaveProb","Props","id","selectedValue","values","valueChangeHandler","map","val","toString","IncDecSelect","props","selectedText","options","x","handleIncDec","delta","newIdx","Math","max","indexOf","length","htmlFor","style","fontSize","display","verticalAlign","label","InputGroup","className","Button","variant","onClick","name","onChange","event","target","maxWidth","thickX","thickCheck","xAndCheck","centerHoriz","parseIntZero","text","intAttempt","parseInt","isNaN","boolToCheckX","span","min","suffix","xspan","concat","rollSpan","xrollSpan","preX","vals","makePropChangeHandler","obj","objChangeHandler","transformer","newObj","undefined","makePropChangeHandlers","makeNumChangeHandler","makeBoolChangeHandler","t","binomialPmf","numTrials","numSuccesses","probSuccess","combinations","pow","addToMapValue","key","oldMapVal","get","set","toPercentString","digitsPastDecimal","toFixed","AttackerControls","atk","attacker","Util","changeHandler","textHandler","numHandler","boolHandler","paramElems","IncProps","rerolls","toCheckX","p","Row","Col","Container","width","slice","DefenderControls","def","defender","CalcControls","setter","rounds","roundsChangeHandler","ShootResultsDisplay","avgDmgUnbounded","avgDmgBounded","killProb","tableBody","ascendingDmgToProb","Map","damageToProb","entries","sort","a","b","probCumulative","forEach","prob","dmg","probAtLeastThisMuchDmg","probAtMostThisMuchDmg","push","Table","bordered","striped","Credits","href","FinalDiceProb","calcFinalDiceProbsForAttacker","calcFinalDiceProbs","toDieProbs","singleDieProbs","numDice","balancedOrChitin","finalDiceProbs","fails","finalDiceProb","calcFinalDiceProb","dieProbs","calcMultiRollProb","numCrits","probCrit","numNorms","probNorm","numFails","probFail","factorial","DefenderFinalDiceStuff","finalDiceProbsWithPx","pxIsRelevant","coverSavesWithPx","calcDefenderFinalDiceStuff","defenderSingleDieProbs","numDefDiceWithoutPx","defenderFinalDiceProbs","Common","defenderFinalDiceProbsWithPx","effectivePx","numDefDiceWithPx","calcPostFnpDamages","preFnpDmgs","skipZeroDamage","postFnpDmgs","probDamagePersists","preFnpProb","preFnpDmg","postFnpDmg","withinFnpProb","calcMultiRoundDamage","dmgsSingleRound","numRounds","dmgsCumulative","dmgsPrevRounds","dmgPrevRounds","probPrevRounds","calcDamage","critHits","normHits","critSaves","normSaves","damage","critSavesCancelCritHits","numCancels","critSavesCancelNormHits","normSavesCancelNormHits","normSavesCancelCritHits","FightStrategy","ShootSection","React","useState","setAttacker","setDefender","setRounds","attackerFinalDiceProbs","defenderStuff","addAtkDefScenario","extraSaves","currProb","usesFnp","positiveDamageProbSum","calcDmgProbs","xs","FighterControls","splitPoint","paramElemsHalf1","paramElemsHalf2","title","FightChoice","FightOptionControls","strategies","Object","opts","fightOptions","paramCols","strategyFighterA","strategyFighterB","firstFighter","FighterState","profile","strategy","currentWounds","hasDoneStun","possibleDmg","CritStrike","NormStrike","newFighterState","toWoundPairKey","guy1Wounds","guy2Wounds","fromWoundPairKey","woundsPairText","split","consolidateWoundPairProbs","woundPairProbs","guy1WoundProbs","guy2WoundProbs","woundPairText","calcRemainingWoundPairProbs","guy1","guy2","guy1Strategy","MaxDmgToEnemy","guy2Strategy","guy1FinalDiceProbs","guy2FinalDiceProbs","endingWoundPairProbs","guy1Dice","guy2Dice","guy1State","guy2State","resolveFight","combinedProb","woundPairProbsAfterMoreRounds","woundPairProbsForBranch","branchWoundPairText","branchProb","currentGuy","nextGuy","applyDmg","totalDmg","resolveDieChoice","calcDieChoice","Error","chooser","enemy","nextDmg","nextStrike","awesomeParry","calcParryForLastEnemySuccessThenKillEnemy","Strike","Parry","wiseParry","MinDmgToSelf","enemyWeStruck","withStrategy","enemyWeParried","chooserWhoStruck","chooserWhoParried","strikeChoice","parryChoice","choice","CritParry","numCancelled","cancelsPerParry","NormParry","fightChoice","critsAfterParry","normsAfterParry","makeFighterResultsSection","woundProbs","woundsOrig","avgWounds","valToWeight","avg","weight","avgDmg","deathProb","ascendingWoundProbs","probAtLeastThisManyWounds","probAtMostThisManyWounds","FightResultsDisplay","fighterAWoundProbs","fighterAWoundsOrig","fighterBWoundProbs","fighterBWoundsOrig","FightOptions","FightSection","fighterA","setFighterA","fighterB","setFighterB","setFightOptions","aFirst","calcRemainingWounds","fighter1WoundProbs","fighter2WoundProbs","App","isShootVisible","setIsShootVisible","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.360fdf79.chunk.js","sourcesContent":["export enum Ability {\n    None = 'X',\n    Balanced = \"Balanced\", // reroll 1 die; also used for Extended Chitin during defense\n    Ceaseless = \"Ceaseless\", // reroll all 1s\n    Relentless = \"Relentless\", // reroll any of your choosing\n    Rending = \"Rending\", // if have crit, promote one normal hit to crit\n    CritPromotesOneFailToNormal = \"Starfire\", // Necron 'starfire core' equipment\n}\n\nexport const rerollAbilities = [Ability.Balanced, Ability.Ceaseless, Ability.Relentless];\n\nexport default Ability;","export default class DieProbs {\n  public crit: number;\n  public norm: number;\n  public fail: number;\n\n  public constructor(\n    crit: number,\n    norm: number,\n    fail: number,\n  ) {\n    this.crit = crit;\n    this.norm = norm;\n    this.fail = fail;\n  }\n\n  public toCritNormFail(): number[] {\n    return [this.crit, this.norm, this.fail];\n  }\n}\n","import _ from \"lodash\";\nimport Ability from \"src/Ability\";\nimport DieProbs from \"src/DieProbs\";\n\nexport default class Attacker {\n  public attacks: number;\n  public bs: number;\n  public normDmg: number;\n  public critDmg: number;\n  public mwx: number; // shoot only\n  public apx: number; // shoot only\n  public px: number; // shoot only\n  public reroll: Ability;\n  public lethalx: number; // 0 means default of crit on 6+; can be 7 to force never-crit\n  public rending: boolean; // a crit promotes a normal hit to a crit;\n  public starfire: boolean; // a crit promotes a fail to a normal hit; shoot only\n  public wounds: number; // fight only\n  public fnp: number; // fight only\n  public brutal: boolean; // fight only\n  public stun: boolean; // fight only\n  public stormShield: boolean; // fight only\n\n  public constructor(\n    attacks: number = 4,\n    bs: number = 3,\n    normDmg: number = 3,\n    critDmg: number = 4,\n    mwx: number = 0,\n    apx: number = 0,\n    px: number = 0,\n    reroll: Ability = Ability.None,\n    lethalx: number = 0,\n    rending: boolean = false,\n    starfire: boolean = false,\n    wounds: number = 12,\n    fnp: number = 0,\n    brutal: boolean = false,\n    stun: boolean = false,\n    stormShield: boolean = false,\n  ) {\n    this.attacks = attacks;\n    this.bs = bs;\n    this.normDmg = normDmg;\n    this.critDmg = critDmg;\n    this.mwx = mwx;\n    this.apx = apx;\n    this.px = px;\n    this.reroll = reroll;\n    this.lethalx = lethalx;\n    this.rending = rending;\n    this.starfire = starfire;\n    this.wounds = wounds;\n    this.fnp = fnp;\n    this.brutal = brutal;\n    this.stun = stun;\n    this.stormShield = stormShield;\n  }\n\n  public static justDamage(\n    normalDamage: number,\n    criticalDamage: number = 0,\n    mwx: number = 0\n  ) : Attacker\n  {\n    return new Attacker(0, 0, normalDamage, criticalDamage, mwx);\n  }\n\n  public critSkill(): number {\n    return this.lethalx === 0 ? 6 : this.lethalx;\n  }\n\n  public possibleDmg(crits: number, norms: number): number {\n    return crits * (this.critDmg + this.mwx) + norms * this.normDmg;\n  }\n\n  public cancelsPerParry(): number {\n    return this.stormShield ? 2 : 1;\n  }\n\n  public toDieProbs(): DieProbs {\n    // BEFORE taking ceaseless and relentless into account\n    let failHitProb = (this.bs - 1) / 6;\n    const critSkill = this.critSkill();\n    let critHitProb = (7 - critSkill) / 6;\n    let normHitProb = (critSkill - this.bs) / 6;\n\n    // now to take ceaseless and relentless into account...\n    if (this.reroll === Ability.Ceaseless || this.reroll === Ability.Relentless) {\n      const rerollMultiplier = (this.reroll === Ability.Ceaseless)\n        ? 7 / 6\n        : (this.bs + 5) / 6;\n      critHitProb *= rerollMultiplier;\n      normHitProb *= rerollMultiplier;\n      failHitProb = 1 - critHitProb - normHitProb;\n    }\n\n    return new DieProbs(critHitProb, normHitProb, failHitProb);\n  }\n\n  public setProp(propName: keyof Attacker, value: number | Ability | boolean) : Attacker {\n    (this[propName] as any) = value;\n    return this;\n  }\n\n  public withProp(propName: keyof Attacker, value: number | Ability | boolean) : Attacker {\n    const copy = _.clone(this);\n    copy.setProp(propName, value);\n    return copy;\n  }\n\n  public withAlwaysNormHit() : Attacker {\n    return this.withProp('bs', 1).setProp('lethalx', 7);\n  }\n\n  public withAlwaysCritHit() : Attacker {\n    return this.withProp('bs', 1).setProp('lethalx', 1);\n  }\n}","import _ from 'lodash';\n\nexport default class Die {\n  static readonly PipMin = 1; \n  static readonly PipMax = 6; \n\n  static PipsUp(): number[] {\n    return _.range(Die.PipMin, Die.PipMax + 1);\n  }\n\n  static PipsDown(): number[] {\n    return _.rangeRight(Die.PipMin, Die.PipMax + 1);\n  }\n\n  static Valid(pip: number): boolean {\n    return pip >= Die.PipMin && pip <= Die.PipMax;\n  }\n}","import _ from \"lodash\";\nimport Die from \"src/Die\";\nimport DieProbs from \"src/DieProbs\";\n\nexport default class Defender {\n  public defense: number;\n  public save: number;\n  public wounds: number;\n  public fnp: number;\n  public invulnSave: number;\n  public coverSaves: number;\n  public chitin: boolean;\n\n  public constructor(\n    defense: number = 3,\n    save: number = 3,\n    wounds: number = 12,\n    fnp: number = 0,\n    invulnSave: number = 0,\n    coverSaves: number = 0,\n    chitin: boolean = false,\n  ) {\n    this.defense = defense;\n    this.save = save;\n    this.wounds = wounds;\n    this.fnp = fnp;\n    this.invulnSave = invulnSave;\n    this.coverSaves = coverSaves;\n    this.chitin = chitin;\n  }\n\n  public usesFnp(): boolean {\n    return Die.Valid(this.fnp);\n  }\n\n  public usesInvulnSave(): boolean {\n    return Die.Valid(this.invulnSave);\n  }\n\n  public relevantSave(): number {\n    return this.usesInvulnSave() ? this.invulnSave : this.save;\n  }\n\n  public toDieProbs(): DieProbs {\n    const critSaveProb = 1 / 6;\n    const normSaveProb = (6 - this.relevantSave()) / 6;\n    const failSaveProb = (this.relevantSave() - 1) / 6;\n    return new DieProbs(\n      critSaveProb,\n      normSaveProb,\n      failSaveProb,\n    );\n  }\n\n  public setProp(propName: keyof Defender, value: number | boolean) : Defender {\n    (this[propName] as any) = value;\n    return this;\n  }\n\n  public withProp(propName: keyof Defender, value: number | boolean) : Defender {\n    const copy = _.clone(this);\n    copy.setProp(propName, value);\n    return copy;\n  }\n\n  public withAlwaysNonfail(): Defender {\n    return this.withProp('save', 1);\n  }\n}","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport * as Util from 'src/Util';\n\nexport interface IProps {\n  id: string;\n  label?: string;\n  values: string[];\n  selectedValue: number | string;\n  valueChangeHandler: Util.Accepter<string>;\n}\n\nexport class Props implements IProps {\n  public id: string;\n  public selectedValue: number | string;\n  public values: string[];\n  public valueChangeHandler: Util.Accepter<string>;\n\n  constructor(\n    id: string,\n    selectedValue: string | number,\n    values: string[] | number[],\n    valueChangeHandler: Util.Accepter<string>,\n  ) {\n    this.id = id;\n    this.values = values.map((val: any) => val.toString()) as string[];\n    this.selectedValue = selectedValue.toString();\n    this.valueChangeHandler = valueChangeHandler;\n  }\n}\n\nconst IncDecSelect: React.FC<IProps> = (props: IProps) => {\n  let selectedText = props.selectedValue.toString();\n  const options = props.values.map(x => <option key={x} value={x}>{x}</option>);\n\n  function handleIncDec(delta: number) {\n    const newIdx = Math.max(0, props.values.indexOf(selectedText)) + delta;\n    if(newIdx >= 0 && newIdx < options.length) {\n      props.valueChangeHandler(props.values[newIdx]);\n    }\n  }\n\n  function handleUserSelect(event: React.ChangeEvent<HTMLSelectElement>) {\n    props.valueChangeHandler(event.target.value);\n  }\n\n  return (\n    <div>\n      <label\n        htmlFor={props.id}\n        style={{ fontSize: '11px', display: 'inline', verticalAlign: 'middle' }}\n      >\n        {props.label ?? props.id}\n      </label>\n      <InputGroup className='mb-1'>\n        <Button variant='danger' onClick={() => handleIncDec(-1)}>-</Button>\n        <select\n          name={props.id}\n          id={props.id}\n          value={selectedText}\n          onChange={handleUserSelect}\n          style={{maxWidth: '70px'}}\n        >\n          {options}\n        </select>\n        <Button variant='danger' onClick={() => handleIncDec(1)}>+</Button>\n      </InputGroup>\n    </div>\n  );\n}\n\nexport default IncDecSelect;","import _ from 'lodash';\nimport { combinations } from 'mathjs';\n\nexport type Accepter<T> = (arg: T) => void;\n\nexport const thickX = 'X'; //'✖'; // the unicode ✖ shows up like a '+' in some fonts\nexport const thickCheck = '✔';\nexport const xAndCheck = [thickX, thickCheck];\nexport const centerHoriz = 'd-flex justify-content-center';\nexport const centerHorizVert = centerHoriz + ' align-items-center';\n\nexport function nameOf(obj: any) : string {\n  return Object.keys(obj)[0];\n}\n\nexport function parseIntZero(text: string) : number {\n    const intAttempt = parseInt(text);\n    return isNaN(intAttempt) ? 0 : intAttempt;\n}\n\nexport function acceptNumToAcceptString(setter: Accepter<number>) : Accepter<string> {\n  return function stringAccepter(text: string): void {\n    setter(parseIntZero(text));\n  }\n}\n\nexport function acceptBoolToAcceptString(setter: Accepter<boolean>) : Accepter<string> {\n  return function stringAccepter(text: string): void {\n    setter(text === thickCheck);\n  }\n}\n\nexport function boolToCheckX(val: boolean) : string {\n  return val ? thickCheck : thickX;\n}\n\nexport function span(min: number, max: number, suffix?: string) : string[] {\n  return _.range(min, max + 1).map(x => x.toString() + (suffix ? suffix : ''));\n}\n\nexport function xspan(min: number, max: number, suffix?: string) : string[] {\n  return _.concat([thickX], span(min, max, suffix));\n}\n\nexport const rollSpan = span(2, 6, '+');\nexport const xrollSpan = preX(rollSpan);\n\nexport function preX(vals: string[]) : string[] {\n  return _.concat([thickX], vals);\n}\n\nexport function makePropChangeHandler<T>(\n  obj: T,\n  objChangeHandler: (t: T) => void,\n  transformer?: (s: string) => any,\n) : (propName: keyof T) => Accepter<string>\n{\n  return (propName: keyof T) => function handler(text: string) {\n    let newObj = _.clone(obj);\n    (newObj as any)[propName] = transformer === undefined ? text : transformer(text);\n    objChangeHandler(newObj);\n  };\n}\n\nexport function makePropChangeHandlers<T>(\n  obj: T,\n  objChangeHandler: (t: T) => void,\n) : ((propName: keyof T) => Accepter<string>)[]\n{\n  return [\n    makePropChangeHandler(obj, objChangeHandler),\n    makeNumChangeHandler(obj, objChangeHandler),\n    makeBoolChangeHandler(obj, objChangeHandler),\n  ];\n}\n\nexport function makeNumChangeHandler<T>(\n  obj: T,\n  objChangeHandler: (t: T) => void,\n) : (propName: keyof T) => Accepter<string>\n{\n  return makePropChangeHandler(obj, objChangeHandler, parseIntZero);\n}\n\nexport function makeBoolChangeHandler<T>(\n  obj: T,\n  objChangeHandler: (t: T) => void,\n) : (propName: keyof T) => Accepter<string>\n{\n  return makePropChangeHandler(obj, objChangeHandler, t => t === thickCheck);\n}\n\nexport function nameof<TObject>(obj: TObject, key: keyof TObject): string;\nexport function nameof<TObject>(key: keyof TObject): string;\nexport function nameof(key1: any, key2?: any): any {\n  return key2 ?? key1;\n}\n\nexport function weightedAverage(valToWeight: Map<number,number>) : number {\n  let avg = 0;\n  valToWeight.forEach((weight, val) => { avg += val * weight; });\n  return avg;\n}\n\nexport function binomialPmf(\n  numTrials: number,\n  numSuccesses: number,\n  probSuccess: number,\n): number\n{\n  // often the variables are named numTrials=n, numSuccesses=k, probSuccess=p\n  return combinations(numTrials, numSuccesses)\n    * Math.pow(probSuccess, numSuccesses)\n    * Math.pow(1 - probSuccess, numTrials - numSuccesses)\n    ;\n}\n\nexport function addToMapValue<T>(map: Map<T,number>, key: T, val: number): void {\n  const oldMapVal = map.get(key) ?? 0;\n  map.set(key, oldMapVal + val);\n}\n\nexport function addMapValues<T>(mapToChange: Map<T,number>, mapToAdd: Map<T,number>): void {\n  for(let [key, val] of mapToAdd) {\n    addToMapValue(mapToChange, key, val);\n  }\n}\n\nexport function  toPercentString(val: number, digitsPastDecimal: number = 2) {\n  return (val * 100).toFixed(digitsPastDecimal);\n}","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport IncDecSelect, {Props as IncProps} from 'src/components/IncDecSelect';\nimport * as Util from 'src/Util';\nimport { boolToCheckX as toCheckX } from 'src/Util';\nimport Attacker from 'src/Attacker';\nimport {rerollAbilities as rerolls} from 'src/Ability';\n\n\nexport interface Props {\n  attacker: Attacker;\n  changeHandler: Util.Accepter<Attacker>;\n}\n\nconst AttackerControls: React.FC<Props> = (props: Props) => {\n  const atk = props.attacker;\n  const [textHandler, numHandler, boolHandler]\n    = Util.makePropChangeHandlers(atk, props.changeHandler);\n\n  const params: IncProps[] = [\n    //           id/label,     selectedValue,            values,              valueChangeHandler\n    new IncProps('Attacks',    atk.attacks,            Util.span(1, 8),       numHandler('attacks')),\n    new IncProps('BS',         atk.bs + '+',           Util.rollSpan,         numHandler('bs')),\n    new IncProps('Normal Dmg', atk.normDmg,            Util.span(1, 9),       numHandler('normDmg')),\n    new IncProps('Crit Dmg',   atk.critDmg,            Util.span(1, 9),       numHandler('critDmg')),\n    new IncProps('MWx',        atk.mwx,                Util.xspan(1, 4),      numHandler('mwx')),\n    new IncProps('APx',        atk.apx,                Util.xspan(1, 3),      numHandler('apx')),\n    new IncProps('Px',         atk.px,                 Util.xspan(1, 3),      numHandler('px')),\n    new IncProps('Reroll',     atk.reroll,             Util.preX(rerolls),    textHandler('reroll')),\n    new IncProps('LethalX',    atk.lethalx + '+',      Util.xspan(4, 5, '+'), numHandler('lethalx')),\n    new IncProps('Rending',    toCheckX(atk.rending),  Util.xAndCheck,        boolHandler('rending')),\n    new IncProps('Starfire',   toCheckX(atk.starfire), Util.xAndCheck,        boolHandler('starfire')),\n  ];\n\n  const paramElems = params.map(p =>\n    <Row key={p.id}><Col className='pr-0'><IncDecSelect {...p}/></Col></Row>);\n\n  return (\n    <Container style={{width: '310px'}}>\n      <Row>Attacker</Row>\n      <Row>\n        <Col>\n          <Container className='p-0'>\n            {paramElems.slice(0, paramElems.length / 2)}\n          </Container>\n        </Col>\n        <Col>\n          <Container className='p-0'>\n            {paramElems.slice(paramElems.length / 2)}\n          </Container>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default AttackerControls;","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport IncDecSelect, {Props as IncProps} from 'src/components/IncDecSelect';\nimport Defender from 'src/Defender';\nimport * as Util from 'src/Util';\nimport { boolToCheckX as toCheckX } from 'src/Util';\n\nexport interface Props {\n  defender: Defender;\n  changeHandler: Util.Accepter<Defender>;\n}\n\n\nconst DefenderControls: React.FC<Props> = (props: Props) => {\n  const saveId = 'Save';\n  const defenseId = 'Defense';\n  const woundsId = 'Wounds';\n  const fnpId = 'FeelNoPain';\n  const invulnSaveId = 'InvulnSave';\n  const coverSavesId = 'CoverSaves';\n  const chitinId = 'ExtendedChitin';\n\n  const def = props.defender;\n  const [, numHandler, boolHandler]\n    = Util.makePropChangeHandlers(def, props.changeHandler);\n\n  const params: IncProps[] = [\n    //           id,           selectedValue,          values,                valueChangeHandler\n    new IncProps(defenseId,    def.defense,          Util.span(0, 4),       numHandler('defense')),\n    new IncProps(saveId,       def.save + '+',       Util.rollSpan,         numHandler('save')),\n    new IncProps(woundsId,     def.wounds,           Util.span(1, 19),      numHandler('wounds')),\n    new IncProps(coverSavesId, def.coverSaves,       Util.xspan(1, 2),      numHandler('coverSaves')),\n    new IncProps(invulnSaveId, def.invulnSave + '+', Util.xrollSpan,        numHandler('invulnSave')),\n    new IncProps(fnpId,        def.fnp + '+',        Util.xspan(3, 6, '+'), numHandler('fnp')),\n    new IncProps(chitinId,     toCheckX(def.chitin), Util.xAndCheck,        boolHandler('chitin')),\n  ];\n\n  const paramElems = params.map(p =>\n    <Row key={p.id}><Col className='pr-0'><IncDecSelect {...p}/></Col></Row>);\n\n  return (\n    <Container style={{width: '150px'}}>\n      <Row>Defender</Row>\n      <Row>\n        <Col>\n          <Container className='p-0'>\n            {paramElems}\n          </Container>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default DefenderControls;","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport IncDecSelect, {Props as IncProps} from 'src/components/IncDecSelect';\nimport * as Util from 'src/Util';\nimport {\n  acceptNumToAcceptString as fromNum\n} from 'src/Util';\n\nexport interface Props {\n  rounds: number;\n  roundsChangeHandler: Util.Accepter<number>;\n}\n\nconst CalcControls: React.FC<Props> = (props: Props) => {\n  const roundsId = 'Rounds';\n\n  const params: IncProps[] = [\n    //           id,       selectedValue,values,          valueChangeHandler\n    new IncProps(roundsId, props.rounds, Util.span(1, 9), fromNum(props.roundsChangeHandler)),\n  ];\n\n  const paramElems = params.map(p =>\n    <Row key={p.id}><Col className='pr-0'><IncDecSelect {...p}/></Col></Row>);\n\n  return (\n    <Container style={{width: '320px'}}>\n      <Row>General</Row>\n      <Row>\n        <Col>\n          <Container className='p-0'>\n            {paramElems}\n          </Container>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default CalcControls;","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Table from 'react-bootstrap/Table';\n\nimport Defender from 'src/Defender';\n\nexport interface Props {\n  defender: Defender;\n  damageToProb: Map<number,number>;\n}\n\nconst ShootResultsDisplay: React.FC<Props> = (props: Props) => {\n  const digitsPastDecimal = 2;\n\n  let avgDmgUnbounded = 0;\n  let avgDmgBounded = 0;\n  let killProb = 0;\n  const tableBody: JSX.Element[] = [];\n\n  let ascendingDmgToProb = new Map<number,number>([...props.damageToProb.entries()].sort((a, b) => a[0] - b[0]));\n  let probCumulative = 0;\n\n  const toPercentString = (val: number) => (val * 100).toFixed(digitsPastDecimal);\n\n  ascendingDmgToProb.forEach((prob, dmg) => {\n     avgDmgUnbounded += dmg * prob;\n     avgDmgBounded += Math.min(dmg, props.defender.wounds) * prob;\n\n     if(dmg >= props.defender.wounds) {\n       killProb += prob;\n     }\n\n     const probAtLeastThisMuchDmg = 1 - probCumulative;\n     probCumulative += prob;\n     const probAtMostThisMuchDmg = probCumulative;\n\n     tableBody.push(\n      <tr key={dmg}>\n        <td>{dmg}</td>\n        <td>{toPercentString(probAtLeastThisMuchDmg)}</td>\n        <td>{toPercentString(probAtMostThisMuchDmg)}</td>\n        <td>{toPercentString(prob)}</td>\n      </tr>);\n  });\n\n  return (\n    <Container style={{width: '320px'}}>\n      <Row>Results</Row>\n      <Row>\n        <Col style={{fontSize: '11px'}}>\n          AvgDmgUnbounded:\n        </Col>\n        <Col>\n          {avgDmgUnbounded.toFixed(digitsPastDecimal)}\n        </Col>\n      </Row>\n      <Row>\n        <Col style={{fontSize: '11px'}}>\n          AvgDmgBounded:\n        </Col>\n        <Col>\n          {avgDmgBounded.toFixed(digitsPastDecimal)}\n        </Col>\n      </Row>\n      <Row>\n        <Col style={{fontSize: '11px'}}>\n          KillChance:\n        </Col>\n        <Col>\n          {(killProb * 100).toFixed(digitsPastDecimal)}%\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Table bordered={true} striped={true} style={{fontSize: '11px'}}>\n            <thead>\n              <tr>\n                <th>Dmg</th>\n                <th>p(&gt;=Dmg)<br />(%)</th>\n                <th>p(&lt;=Dmg)<br />(%)</th>\n                <th>p(Dmg)<br />(%)</th>\n              </tr>\n            </thead>\n            <tbody>\n              {tableBody}\n            </tbody>\n          </Table>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default ShootResultsDisplay;","import React from 'react';\n\nexport interface Props {\n}\n\nconst Credits: React.FC<Props> = (props: Props) => {\n  return (\n    <p>\n      <a href=\"https://github.com/jmegner/KT21Calculator\">GitHub source code repository</a> <br />\n      Authored by <a href=\"https://github.com/jmegner\">Jacob Egner</a>.<br />\n      Inspired by <a href=\"https://github.com/ramainen\">Damir Fakhrutdinov</a>'s Monte-Carlo-based <a href=\"http://kt2.doit-cms.ru/\">Kill Team Simulator 2</a>.<br />\n    </p>\n  );\n}\n\nexport default Credits;","export default class FinalDiceProb {\n  public prob: number;\n  public crits: number;\n  public norms: number;\n\n  public constructor(\n    prob: number,\n    crits: number,\n    norms: number\n  ) {\n    this.prob = prob;\n    this.crits = crits;\n    this.norms = norms;\n  }\n\n  public successes(): number {\n    return this.crits + this.norms;\n  }\n}\n","import { factorial, } from 'mathjs';\n\nimport Ability from \"src/Ability\";\nimport Attacker from \"src/Attacker\";\nimport DieProbs from \"src/DieProbs\";\nimport FinalDiceProb from 'src/FinalDiceProb';\n\nexport function calcFinalDiceProbsForAttacker(\n  attacker: Attacker,\n): FinalDiceProb[]\n{\n  return calcFinalDiceProbs(\n    attacker.toDieProbs(),\n    attacker.attacks,\n    attacker.reroll === Ability.Balanced,\n    attacker.rending,\n    attacker.starfire,\n  );\n}\n\nexport function calcFinalDiceProbs(\n  singleDieProbs: DieProbs,\n  numDice: number,\n  balancedOrChitin: boolean = false,\n  rending: boolean = false,\n  starfire: boolean = false\n): FinalDiceProb[]\n{\n  let finalDiceProbs: FinalDiceProb[] = [];\n\n  for (let crits = 0; crits <= numDice; crits++) {\n    for (let norms = 0; norms <= numDice - crits; norms++) {\n      const fails = numDice - crits - norms;\n\n      const finalDiceProb = calcFinalDiceProb(\n        singleDieProbs,\n        crits,\n        norms,\n        fails,\n        balancedOrChitin,\n        rending,\n        starfire,\n      );\n\n      if (finalDiceProb.prob > 0) {\n        finalDiceProbs.push(finalDiceProb);\n      }\n    }\n  }\n\n  return finalDiceProbs;\n}\n\nexport function calcFinalDiceProb(\n  dieProbs: DieProbs,\n  crits: number,\n  norms: number,\n  fails: number,\n  balancedOrChitin: boolean,\n  rending: boolean = false,\n  starfire: boolean = false,\n): FinalDiceProb\n{\n  let prob = calcMultiRollProb(crits, dieProbs.crit, norms, dieProbs.norm, fails, dieProbs.fail);\n\n  // there are multiple ways to get to this {crits,norms,fails} via OriginalRoll + BalancedRoll\n  if (balancedOrChitin) {\n    // if have {c,n,f}, then could be because...\n    //    was {c,n,f=0} and no balance roll\n    //    was {c,n,f>0} then balanced-rolled f\n    //    was {c-1,n,f+1} then balanced-rolled c\n    //    was {c,n-1,f+1} then balanced-rolled n\n\n    if (fails > 0) {\n      prob *= dieProbs.fail;\n    }\n    // else \"no fails\" means start out with probability of original roll\n\n    if (crits > 0) {\n      prob += dieProbs.crit * calcMultiRollProb(crits - 1, dieProbs.crit, norms, dieProbs.norm, fails + 1, dieProbs.fail)\n    }\n\n    if (norms > 0) {\n      prob += dieProbs.norm * calcMultiRollProb(crits, dieProbs.crit, norms - 1, dieProbs.norm, fails + 1, dieProbs.fail)\n    }\n  }\n\n  if (rending) {\n    if (crits > 0 && norms > 0) {\n      crits++;\n      norms--;\n    }\n  }\n\n  if (starfire) {\n    if (crits > 0 && fails > 0) {\n      norms++;\n      fails--;\n    }\n  }\n\n  return new FinalDiceProb(prob, crits, norms);\n}\n\nexport function calcMultiRollProb(\n  numCrits: number,\n  probCrit: number,\n  numNorms: number,\n  probNorm: number,\n  numFails: number,\n  probFail: number,\n): number\n{\n  const prob\n    = Math.pow(probCrit, numCrits)\n    * Math.pow(probNorm, numNorms)\n    * Math.pow(probFail, numFails)\n    * factorial(numCrits + numNorms + numFails)\n    / factorial(numCrits)\n    / factorial(numNorms)\n    / factorial(numFails)\n    ;\n  return prob;\n}\n","import _ from \"lodash\";\n\nimport Attacker from \"src/Attacker\";\nimport Defender from \"src/Defender\";\nimport * as Util from 'src/Util';\nimport FinalDiceProb from 'src/FinalDiceProb';\nimport * as Common from 'src/CalcEngineCommon';\n\nclass DefenderFinalDiceStuff {\n  public finalDiceProbs: FinalDiceProb[];\n  public finalDiceProbsWithPx: FinalDiceProb[];\n  public pxIsRelevant: boolean;\n  public coverSaves: number;\n  public coverSavesWithPx: number;\n\n  public constructor(\n    finalDiceProbs: FinalDiceProb[],\n    finalDiceProbsWithPx: FinalDiceProb[],\n    pxIsRelevant: boolean,\n    coverSaves: number,\n    coverSavesWithPx: number,\n  )\n  {\n    this.finalDiceProbs = finalDiceProbs;\n    this.finalDiceProbsWithPx = finalDiceProbsWithPx;\n    this.pxIsRelevant = pxIsRelevant;\n    this.coverSaves = coverSaves;\n    this.coverSavesWithPx = coverSavesWithPx;\n  }\n}\n\nexport function calcDmgProbs(\n  attacker: Attacker,\n  defender: Defender,\n  numRounds: number = 1,\n): Map<number, number> // damage to prob\n{\n  const attackerFinalDiceProbs = Common.calcFinalDiceProbsForAttacker(attacker);\n  const defenderStuff = calcDefenderFinalDiceStuff(defender, attacker);\n\n  // don't add damage=0 stuff until just before multi-round handling\n  let damageToProb = new Map<number, number>();\n\n  function addAtkDefScenario(atk: FinalDiceProb, def: FinalDiceProb, extraSaves: number): void {\n    const currProb = atk.prob * def.prob;\n    const damage = calcDamage(attacker, atk.crits, atk.norms, def.crits, def.norms + extraSaves);\n\n    if (damage > 0) {\n      Util.addToMapValue(damageToProb, damage, currProb);\n    }\n  }\n\n  for (const atk of attackerFinalDiceProbs) {\n    if (atk.crits + atk.norms > 0) {\n      if (defenderStuff.pxIsRelevant && atk.crits > 0) {\n        for (const def of defenderStuff.finalDiceProbsWithPx) {\n          addAtkDefScenario(atk, def, defenderStuff.coverSavesWithPx);\n        }\n      }\n      else {\n        for (const def of defenderStuff.finalDiceProbs) {\n          addAtkDefScenario(atk, def, defenderStuff.coverSaves);\n        }\n      }\n    }\n  }\n\n  if(defender.usesFnp()) {\n    damageToProb = calcPostFnpDamages(defender.fnp, damageToProb);\n  }\n\n  let positiveDamageProbSum = 0;\n  damageToProb.forEach(prob => positiveDamageProbSum += prob);\n\n  if (positiveDamageProbSum < 1) {\n    damageToProb.set(0, 1 - positiveDamageProbSum);\n  }\n\n  if(numRounds > 1) {\n    damageToProb = calcMultiRoundDamage(damageToProb, numRounds);\n  }\n\n  return damageToProb;\n}\n\nfunction calcDefenderFinalDiceStuff(\n  defender: Defender,\n  attacker: Attacker,\n): DefenderFinalDiceStuff\n{\n  const defenderSingleDieProbs = defender.toDieProbs();\n\n  const numDefDiceWithoutPx = Math.max(0, defender.usesInvulnSave() ? defender.defense : defender.defense - attacker.apx);\n  const coverSaves = Math.min(defender.coverSaves, numDefDiceWithoutPx);\n  const numDefRollsWithoutPx = numDefDiceWithoutPx - coverSaves;\n\n  const defenderFinalDiceProbs = Common.calcFinalDiceProbs(\n    defenderSingleDieProbs,\n    numDefRollsWithoutPx,\n    defender.chitin,\n    );\n\n  let defenderFinalDiceProbsWithPx: FinalDiceProb[] = [];\n\n  // if APx > Px, then ignore Px\n  const effectivePx = attacker.apx >= attacker.px ? 0 : attacker.px;\n  const pxIsRelevant = effectivePx > 0 && !defender.usesInvulnSave();\n  let coverSavesWithPx = 0;\n\n  // for Px triggered and relevant\n  if (pxIsRelevant) {\n    const numDefDiceWithPx = Math.max(0, defender.defense - effectivePx);\n    coverSavesWithPx = Math.min(defender.coverSaves, numDefDiceWithPx);\n    const numDefRollsWithPx = numDefDiceWithPx - coverSavesWithPx;\n\n    defenderFinalDiceProbsWithPx = Common.calcFinalDiceProbs(\n      defenderSingleDieProbs,\n      numDefRollsWithPx,\n      defender.chitin,\n    );\n  }\n\n  return new DefenderFinalDiceStuff(\n    defenderFinalDiceProbs,\n    defenderFinalDiceProbsWithPx,\n    pxIsRelevant,\n    coverSaves,\n    coverSavesWithPx,\n  );\n}\n\nfunction calcPostFnpDamages(\n  fnp: number,\n  preFnpDmgs: Map<number,number>,\n  skipZeroDamage: boolean = true,\n): Map<number,number>\n{\n  const postFnpDmgs = new Map<number,number>();\n  const probDamagePersists = (fnp - 1) / 6;\n\n  preFnpDmgs.forEach((preFnpProb, preFnpDmg) => {\n    for(let postFnpDmg = skipZeroDamage ? 1 : 0; postFnpDmg <= preFnpDmg; postFnpDmg++) {\n      const withinFnpProb = Util.binomialPmf(preFnpDmg, postFnpDmg, probDamagePersists);\n      Util.addToMapValue(postFnpDmgs, postFnpDmg, preFnpProb * withinFnpProb);\n    }\n  });\n\n  return postFnpDmgs;\n}\n\nfunction calcMultiRoundDamage(\n  dmgsSingleRound: Map<number,number>,\n  numRounds: number,\n): Map<number, number>\n{\n  let dmgsCumulative = new Map<number,number>(dmgsSingleRound);\n\n  for(let roundIdx of _.range(1, numRounds)) { // eslint-disable-line\n    const dmgsPrevRounds = dmgsCumulative;\n    dmgsCumulative = new Map<number,number>();\n\n    for(let [dmgPrevRounds, probPrevRounds] of dmgsPrevRounds) {\n      for(let [dmgSingleRound, probSingleRound] of dmgsSingleRound) {\n        const dmgCumulative = dmgPrevRounds + dmgSingleRound;\n        Util.addToMapValue(dmgsCumulative, dmgCumulative, probPrevRounds * probSingleRound);\n      }\n    }\n  }\n\n  return dmgsCumulative;\n}\n\nfunction calcDamage(\n  attacker: Attacker,\n  critHits: number,\n  normHits: number,\n  critSaves: number,\n  normSaves: number,\n): number {\n  let damage = critHits * attacker.mwx;\n\n  const numNormalSavesToCancelCritHit = 2;\n\n  function critSavesCancelCritHits() {\n    const numCancels = Math.min(critSaves, critHits);\n    critSaves -= numCancels;\n    critHits -= numCancels;\n  }\n  function critSavesCancelNormHits() {\n    const numCancels = Math.min(critSaves, normHits);\n    critSaves -= numCancels;\n    normHits -= numCancels;\n  }\n  function normSavesCancelNormHits() {\n    const numCancels = Math.min(normSaves, normHits);\n    normSaves -= numCancels;\n    normHits -= numCancels;\n  }\n  function normSavesCancelCritHits() {\n    const numCancels = Math.min((normSaves / numNormalSavesToCancelCritHit) >> 0, critHits);\n    normSaves -= numCancels * numNormalSavesToCancelCritHit;\n    critHits -= numCancels;\n  }\n\n  if (attacker.critDmg >= attacker.normDmg) {\n    critSavesCancelCritHits();\n    critSavesCancelNormHits();\n\n    if (attacker.critDmg > 2 * attacker.normDmg) {\n      normSavesCancelCritHits();\n      normSavesCancelNormHits();\n    }\n    else {\n      // with norm saves, you prefer to cancel norm hits, but you want to avoid\n      // cancelling all norm hits and being left over with >=1 crit hit and 1 normal save;\n      // in that case, you should have cancelled 1 crit hit before cancelling norm hits;\n      if (normSaves > normHits && normSaves >= numNormalSavesToCancelCritHit && critHits > 0) {\n        normSaves -= numNormalSavesToCancelCritHit;\n        critHits--;\n      }\n\n      normSavesCancelNormHits();\n      normSavesCancelCritHits();\n    }\n  }\n  else {\n    normSavesCancelNormHits();\n    critSavesCancelNormHits();\n    critSavesCancelCritHits();\n    normSavesCancelCritHits();\n  }\n\n  damage += critHits * attacker.critDmg + normHits * attacker.normDmg;\n  return damage;\n}\n\nexport const exportedForTesting = {\n  calcDamage,\n  calcMultiRoundDamage,\n  calcPostFnpDamages,\n};\n\n","export enum FightStrategy {\n    MaxDmgToEnemy = 'Max Dmg To Enemy',\n    MinDmgToSelf = 'Min Dmg To Self',\n    Strike = 'Strike',\n    Parry = 'Parry',\n}\n\nexport default FightStrategy;","import React from 'react';\nimport {\n  Col,\n  Container,\n  Row,\n} from 'react-bootstrap';\n\nimport Attacker from 'src/Attacker';\nimport Defender from 'src/Defender';\nimport AttackerControls from \"src/components/AttackerControls\";\nimport DefenderControls from \"src/components/DefenderControls\";\nimport CalcControls from 'src/components/CalcControls';\nimport ShootResultsDisplay from 'src/components/ShootResultsDisplay';\nimport Credits from 'src/components/Credits';\nimport * as Util from \"src/Util\";\nimport { calcDmgProbs } from 'src/CalcEngineShoot';\n\nconst ShootSection: React.FC = () => {\n  const [attacker, setAttacker] = React.useState(new Attacker());\n  const [defender, setDefender] = React.useState(new Defender());\n  const [rounds, setRounds] = React.useState(1);\n\n  const damageToProb = calcDmgProbs(attacker, defender, rounds);\n\n  return (\n    <Container style={{width: '510px'}}>\n      <Row>\n        <Col className={Util.centerHoriz + ' p-0'} xs='auto'>\n          <Container>\n            <Row className='border'>\n              <AttackerControls attacker={attacker} changeHandler={setAttacker} />\n            </Row>\n            <Row className='border'>\n              <CalcControls rounds={rounds} roundsChangeHandler={setRounds} />\n            </Row>\n          </Container>\n        </Col>\n        <Col className={Util.centerHoriz + ' border' } xs='auto'>\n          <DefenderControls defender={defender} changeHandler={setDefender} />\n        </Col>\n      </Row>\n      <Row className='border'>\n        <ShootResultsDisplay damageToProb={damageToProb} defender={defender} />\n      </Row>\n      <Row>\n        <Col className={Util.centerHoriz + ' border'} style={{fontSize: '11px'}}>\n          <Credits/>\n        </Col>\n      </Row>\n      <Row>\n        <Col className='border' style={{fontSize: '11px'}}>\n          Notes:\n          <ul>\n            <li>AvgDamageBounded is the average of damage bounded by the number of the defender's wounds.</li>\n            <li>AvgDamageUnbounded is the average of damage without regard to defender's wounds.</li>\n            <li>InvulnSave is always used if valid.</li>\n            <li>\n              Feel No Pain (FNP) refers to the category of abilities where just before damage is actually resolved,\n              you roll a die for each potential wound, and each rolled success prevents a wound from being lost.\n              Even MWx damage can be prevented via FNP. The\n              &#x202F;<a href=\"https://wahapedia.ru/kill-team2/kill-teams/death-guard#Plague-Marine-Warrior-\">Plague Marine (Warrior)</a>&#x202F;\n              ability Disgustingly Resilient is a FNP=5+ ability.\n            </li>\n            <li>\n              \"Starfire\" refers to\n              &#x202F;<a href=\"https://wahapedia.ru/kill-team2/kill-teams/tomb-world/#Equipment\">Necron Equipment</a>&#x202F;\n              Starfire Core, which allows you to transform a failed hit into a normal hit if you had at least one\n              critical hit.\n            </li>\n            <li>\n              Balanced and Chitin\n              (<a href=\"https://wahapedia.ru/kill-team2/kill-teams/hive-fleet/#Equipment\">Hive Fleet equipment</a> Extended Chitin)\n              will only reroll a fail even if would be wise to reroll a normal success.\n            </li>\n            <li>\n              Cover saves can go up to 2 via the\n              &#x202F;<a href=\"https://wahapedia.ru/kill-team2/kill-teams/hive-fleet#Strategic-Ploys\">Hive Fleet strategic ploy</a>&#x202F;\n              Lurk and the\n              &#x202F;<a href=\"https://wahapedia.ru/kill-team2/kill-teams/brood-coven#Strategic-Ploys\">Brood Coven strategic ploy</a>&#x202F;\n              Lurk In The Shadows. Lurk In The Shadows also allows a defender's 1 cover save to count as a critical save, but that is not implemented.\n            </li>\n          </ul>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default ShootSection;","\nimport React from 'react';\nimport {\n  Col,\n  Container,\n  Row,\n  //Stack,\n} from 'react-bootstrap';\n\nimport IncDecSelect, {Props as IncProps} from 'src/components/IncDecSelect';\nimport * as Util from 'src/Util';\nimport { boolToCheckX as toCheckX } from 'src/Util';\nimport Attacker from 'src/Attacker';\nimport {rerollAbilities as rerolls} from 'src/Ability';\n\n\nexport interface Props {\n  title: string;\n  attacker: Attacker;\n  changeHandler: Util.Accepter<Attacker>;\n}\n\nconst FighterControls: React.FC<Props> = (props: Props) => {\n  const atk = props.attacker;\n  const [textHandler, numHandler, boolHandler]\n    = Util.makePropChangeHandlers(atk, props.changeHandler);\n\n  const params: IncProps[] = [\n    //           id/label,          selectedValue,             values,              valueChangeHandler\n    new IncProps('Attacks',      atk.attacks,               Util.span(1, 8),       numHandler('attacks')),\n    new IncProps('WS',           atk.bs + '+',              Util.rollSpan,         numHandler('bs')),\n    new IncProps('Normal Dmg',   atk.normDmg,               Util.span(1, 9),       numHandler('normDmg')),\n    new IncProps('Critical Dmg', atk.critDmg,               Util.span(1, 9),       numHandler('critDmg')),\n    new IncProps('LethalX',      atk.lethalx + '+',         Util.xspan(4, 5, '+'), numHandler('lethalx')),\n    new IncProps('Reroll',       atk.reroll,                Util.preX(rerolls),    textHandler('reroll')),\n    // 2nd col\n    new IncProps('Wounds',       atk.wounds,                Util.span(1, 19),      numHandler('wounds')),\n    new IncProps('Rending',      toCheckX(atk.rending),     Util.xAndCheck,        boolHandler('rending')),\n    new IncProps('Brutal',       toCheckX(atk.brutal),      Util.xAndCheck,        boolHandler('brutal')),\n    new IncProps('Stun',         toCheckX(atk.stun),        Util.xAndCheck,        boolHandler('stun')),\n    new IncProps('Storm Shield', toCheckX(atk.stormShield), Util.xAndCheck,        boolHandler('stormShield')),\n    //new IncProps('FeelNoPain',   atk.fnp + '+',             Util.xspan(3, 6, '+'), numHandler('fnp')),\n  ];\n\n  const paramElems = params.map(p =>\n    <Row key={p.id}><Col className='pr-0'><IncDecSelect {...p}/></Col></Row>);\n  const splitPoint = (paramElems.length + 1) / 2;\n  const paramElemsHalf1 = paramElems.slice(0, splitPoint);\n  const paramElemsHalf2 = paramElems.slice(splitPoint);\n\n  return (\n    <Container style={{width: '310px'}}>\n      <Row>{props.title}</Row>\n      <Row>\n        <Col>\n          <Container className='p-0'>\n            {paramElemsHalf1}\n          </Container>\n        </Col>\n        <Col>\n          <Container className='p-0'>\n            {paramElemsHalf2}\n          </Container>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default FighterControls;","export enum FightChoice {\n  CritStrike,\n  NormStrike,\n  CritParry,\n  NormParry\n}\n\nexport default FightChoice;","import React from 'react';\nimport {\n  Col,\n  Container,\n  Row,\n} from 'react-bootstrap';\n\nimport IncDecSelect, {Props as IncProps} from 'src/components/IncDecSelect';\nimport * as Util from 'src/Util';\nimport FightStrategy from 'src/FightStrategy';\nimport FightOptions from 'src/FightOptions';\n\n\nexport interface Props {\n  fightOptions: FightOptions;\n  changeHandler: Util.Accepter<FightOptions>;\n}\n\nconst FightOptionControls: React.FC<Props> = (props: Props) => {\n  const strategyFighterAId = 'Fighter A Strategy';\n  const strategyFighterBId = 'Fighter B Strategy';\n  const firstFighterId = 'Attacker/FirstActer';\n  const numRoundsId = 'Rounds';\n  const strategies = Object.values(FightStrategy);\n  const opts = props.fightOptions;\n  const [textHandler, numHandler, ]\n    = Util.makePropChangeHandlers(opts, props.changeHandler);\n\n  const params: IncProps[] = [\n    //           id/label,           selectedValue,         values,          valueChangeHandler\n    new IncProps(strategyFighterAId, opts.strategyFighterA, strategies,      textHandler('strategyFighterA')),\n    new IncProps(strategyFighterBId, opts.strategyFighterB, strategies,      textHandler('strategyFighterB')),\n    new IncProps(firstFighterId,     opts.firstFighter,     ['A', 'B'],      textHandler('firstFighter')),\n    new IncProps(numRoundsId,        opts.numRounds,        Util.span(1, 3), numHandler('numRounds')),\n  ];\n\n  const paramCols = params.map(p =>\n    <Col key={p.id} className='pr-0 col-auto'><IncDecSelect {...p}/></Col>);\n\n  return (\n    <Container style={{width: '600px'}}>\n      <Row>\n        General\n      </Row>\n      <Row>\n        {paramCols}\n      </Row>\n    </Container>\n  );\n}\n\nexport default FightOptionControls;","import _ from \"lodash\";\nimport Attacker from \"src/Attacker\";\nimport FightStrategy from 'src/FightStrategy';\nimport FightChoice from \"src/FightChoice\";\n\nexport default class FighterState {\n  public profile: Attacker;\n  public crits: number;\n  public norms: number;\n  public strategy: FightStrategy;\n  public currentWounds: number;\n  public hasDoneStun: boolean;\n\n  public constructor(\n    profile: Attacker,\n    crits: number,\n    norms: number,\n    strategy: FightStrategy,\n    currentWounds: number = -1,\n    hasDoneStun: boolean = false,\n  ) {\n    this.profile = profile;\n    this.crits = crits;\n    this.norms = norms;\n    this.strategy = strategy;\n    this.currentWounds = currentWounds > 0 ? currentWounds : this.profile.wounds;\n    this.hasDoneStun = hasDoneStun;\n  }\n\n  public applyDmg(dmg: number) {\n    this.currentWounds = Math.max(0, this.currentWounds - dmg);\n  }\n\n  public totalDmg(): number {\n    return this.profile.possibleDmg(this.crits, this.norms);\n  }\n\n  public nextDmg(): number {\n    if (this.crits > 0) {\n      return this.profile.critDmg;\n    }\n    if (this.norms > 0) {\n      return this.profile.normDmg;\n    }\n    return 0;\n  }\n\n  public nextStrike(): FightChoice {\n    return this.crits > 0 ? FightChoice.CritStrike : FightChoice.NormStrike;\n  }\n\n  public withStrategy(strategy: FightStrategy): FighterState {\n    const newFighterState = _.clone(this);\n    newFighterState.strategy = strategy;\n    return newFighterState;\n  }\n}\n","import _ from \"lodash\";\n\nimport Attacker from \"src/Attacker\";\nimport * as Util from 'src/Util';\nimport * as Common from 'src/CalcEngineCommon';\nimport FightStrategy from 'src/FightStrategy';\nimport FighterState from \"src/FighterState\";\nimport FightChoice from \"src/FightChoice\";\n\nexport const toWoundPairKey = (guy1Wounds: number, guy2Wounds: number): string => [guy1Wounds, guy2Wounds].toString();\nexport const fromWoundPairKey = (woundsPairText: string): number[] => woundsPairText.split(',').map(x => parseInt(x));\n\nexport function calcRemainingWounds(\n  guy1: Attacker,\n  guy2: Attacker,\n  guy1Strategy: FightStrategy = FightStrategy.MaxDmgToEnemy,\n  guy2Strategy: FightStrategy = FightStrategy.MaxDmgToEnemy,\n  numRounds: number = 1,\n): [Map<number, number>, Map<number,number>] // remaining wounds to prob\n{\n  return consolidateWoundPairProbs(calcRemainingWoundPairProbs(guy1, guy2, guy1Strategy, guy2Strategy, numRounds));\n}\n\nexport function consolidateWoundPairProbs(woundPairProbs: Map<string,number>): [Map<number,number>, Map<number,number>] {\n  const guy1WoundProbs = new Map<number,number>();\n  const guy2WoundProbs = new Map<number,number>();\n\n  for(let [woundPairText, prob] of woundPairProbs) {\n    const [guy1Wounds, guy2Wounds] = fromWoundPairKey(woundPairText);\n    Util.addToMapValue(guy1WoundProbs, guy1Wounds, prob);\n    Util.addToMapValue(guy2WoundProbs, guy2Wounds, prob);\n  }\n\n  return [guy1WoundProbs, guy2WoundProbs];\n}\n\nexport function calcRemainingWoundPairProbs(\n  guy1: Attacker,\n  guy2: Attacker,\n  guy1Strategy: FightStrategy = FightStrategy.MaxDmgToEnemy,\n  guy2Strategy: FightStrategy = FightStrategy.MaxDmgToEnemy,\n  numRounds: number = 1,\n): Map<string, number> // remaining wound-pairs (as stringified array) to probs\n{\n  const guy1FinalDiceProbs = Common.calcFinalDiceProbsForAttacker(guy1);\n  const guy2FinalDiceProbs = Common.calcFinalDiceProbsForAttacker(guy2);\n\n  let endingWoundPairProbs = new Map<string, number>();\n\n  for(let guy1Dice of guy1FinalDiceProbs) {\n    for(let guy2Dice of guy2FinalDiceProbs) {\n      const guy1State = new FighterState(\n        guy1,\n        guy1Dice.crits,\n        guy1Dice.norms,\n        guy1Strategy,\n      );\n      const guy2State = new FighterState(\n        guy2,\n        guy2Dice.crits,\n        guy2Dice.norms,\n        guy2Strategy,\n      );\n\n      resolveFight(guy1State, guy2State);\n\n      const combinedProb = guy1Dice.prob * guy2Dice.prob;\n      Util.addToMapValue(\n        endingWoundPairProbs,\n        toWoundPairKey(guy1State.currentWounds, guy2State.currentWounds),\n        combinedProb,\n      );\n    }\n  }\n\n  if(numRounds > 1) {\n    const woundPairProbsAfterMoreRounds = new Map<string,number>();\n\n    for(let [woundPairText, prob] of endingWoundPairProbs) {\n      const [guy1Wounds, guy2Wounds] = fromWoundPairKey(woundPairText);\n\n      if(guy1Wounds === 0 || guy2Wounds === 0) {\n        Util.addToMapValue(woundPairProbsAfterMoreRounds, woundPairText, prob);\n      }\n      else {\n        const woundPairProbsForBranch = calcRemainingWoundPairProbs(\n          guy1.withProp('wounds', guy1Wounds),\n          guy2.withProp('wounds', guy2Wounds),\n          guy1Strategy,\n          guy2Strategy,\n          numRounds - 1,\n        );\n\n        for(let [branchWoundPairText, branchProb] of woundPairProbsForBranch) {\n          Util.addToMapValue(woundPairProbsAfterMoreRounds, branchWoundPairText, prob * branchProb);\n        }\n      }\n    }\n\n    endingWoundPairProbs = woundPairProbsAfterMoreRounds;\n  }\n\n  return endingWoundPairProbs;\n}\n\nfunction resolveFight(\n  guy1State: FighterState,\n  guy2State: FighterState,\n): void\n{\n  let currentGuy = guy1State;\n  let nextGuy = guy2State;\n\n  while(currentGuy.crits + currentGuy.norms + nextGuy.crits + nextGuy.norms > 0\n    && currentGuy.currentWounds > 0 && nextGuy.currentWounds > 0)\n  {\n    // if a guy is out of successes, then other guy does all strikes\n    if(currentGuy.crits + currentGuy.norms <= 0) {\n      currentGuy.applyDmg(nextGuy.totalDmg());\n      break;\n    }\n    else if(nextGuy.crits + nextGuy.norms <= 0) {\n      nextGuy.applyDmg(currentGuy.totalDmg());\n      break;\n    }\n    else {\n      const choice = calcDieChoice(currentGuy, nextGuy);\n      resolveDieChoice(choice, currentGuy, nextGuy);\n      [currentGuy, nextGuy] = [nextGuy, currentGuy];\n    }\n  }\n\n  if(guy1State.crits < 0 || guy1State.norms < 0\n    || guy2State.crits < 0 || guy1State.norms < 0)\n  {\n    throw new Error(\"bug: ended up with negative successes\")\n  }\n}\n\nfunction calcDieChoice(chooser: FighterState, enemy: FighterState): FightChoice {\n  // note: this function assumes both chooser and enemy have remaining successes\n\n  // ALWAYS strike if you can kill enemy with a single strike\n  // OR if enemy has brutal\n  if(chooser.nextDmg() >= enemy.currentWounds || enemy.profile.brutal) {\n    return chooser.nextStrike();\n  }\n\n  // if can stun enemy (crit strike that also cancels an enemy NORM success),\n  // and enemy doesn't have any crit successes, then there is no downside\n  // to doing a stunning crit strike now\n  if(chooser.profile.stun && !chooser.hasDoneStun && chooser.crits > 0 && enemy.crits === 0) {\n    return FightChoice.CritStrike;\n  }\n\n  // if can parry last enemy success and still kill, then that is awesome\n  // and we should do that\n  const awesomeParry = calcParryForLastEnemySuccessThenKillEnemy(chooser, enemy);\n  if(awesomeParry !== null) {\n    return awesomeParry;\n  }\n\n  if(chooser.strategy === FightStrategy.Strike) {\n    return chooser.nextStrike();\n  }\n  else if(chooser.strategy === FightStrategy.Parry) {\n    return wiseParry(chooser, enemy);\n  }\n  else if(chooser.strategy === FightStrategy.MaxDmgToEnemy\n    || chooser.strategy === FightStrategy.MinDmgToSelf)\n  {\n    // calc dmgs if all strike or all parry; take better option\n    const enemyWeStruck = enemy.withStrategy(FightStrategy.Strike);\n    const enemyWeParried = _.clone(enemyWeStruck);\n\n    const chooserWhoStruck = _.clone(chooser);\n    const chooserWhoParried = _.clone(chooser);\n    const strikeChoice = chooser.nextStrike();\n    const parryChoice = wiseParry(chooser, enemy);\n\n    resolveDieChoice(strikeChoice, chooserWhoStruck, enemyWeStruck);\n    resolveDieChoice(parryChoice, chooserWhoParried, enemyWeParried);\n\n    resolveFight(enemyWeStruck, chooserWhoStruck);\n    resolveFight(enemyWeParried, chooserWhoParried);\n\n    let wantStrike = true;\n\n    if(chooser.strategy === FightStrategy.MaxDmgToEnemy) {\n      wantStrike = enemyWeStruck.currentWounds <= enemyWeParried.currentWounds;\n    }\n    // else MinDmgToSelf\n    else {\n      wantStrike = chooserWhoStruck.currentWounds >= chooserWhoParried.currentWounds;\n    }\n\n    if(wantStrike) {\n      return strikeChoice;\n    }\n    else {\n      return parryChoice;\n    }\n  }\n\n  throw new Error('unsupported FightStrategy: ' + chooser.strategy);\n}\n\nfunction resolveDieChoice(\n  choice: FightChoice,\n  chooser: FighterState,\n  enemy: FighterState,\n): void\n{\n  if(choice === FightChoice.CritStrike) {\n    chooser.crits--;\n    enemy.applyDmg(chooser.profile.critDmg);\n\n    if(chooser.profile.stun && !chooser.hasDoneStun) {\n      chooser.hasDoneStun = true;\n      enemy.norms = Math.max(0, enemy.norms - 1); // stun ability can only cancel an enemy norm success\n    }\n  }\n  else if(choice === FightChoice.NormStrike) {\n    chooser.norms--;\n    enemy.applyDmg(chooser.profile.normDmg);\n  }\n  else if(choice === FightChoice.CritParry) {\n    chooser.crits--;\n\n    for(let numCancelled = 0; numCancelled < chooser.profile.cancelsPerParry(); numCancelled++) {\n      if(enemy.crits > 0) {\n        enemy.crits--;\n      }\n      else if(enemy.norms > 0) {\n        enemy.norms--;\n      }\n    }\n  }\n  else if(choice === FightChoice.NormParry) {\n    chooser.norms--;\n    enemy.norms = Math.max(0, enemy.norms - chooser.profile.cancelsPerParry());\n  }\n  else {\n    throw new Error(\"invalid DieChoice\");\n  }\n}\n\nfunction calcParryForLastEnemySuccessThenKillEnemy(\n  chooser: FighterState,\n  enemy: FighterState,\n): FightChoice | null\n{\n  // note: this function assumes chooser and enemy have successes\n\n  // if chooser can parry enemy's remaining success (or successes due to storm shield)\n  // AND kill enemy afterwards, then chooser should parry\n  if(enemy.crits + enemy.norms <= chooser.profile.cancelsPerParry()) {\n    let fightChoice: FightChoice | null = null;\n\n    if(enemy.crits > 0) {\n      if(chooser.crits > 0) {\n        fightChoice = FightChoice.CritParry;\n      }\n      // else chooser has no crits and can not parry the enemy crit\n    }\n    // else enemy.norms > 0\n    else {\n      if(chooser.norms > 0) {\n        fightChoice = FightChoice.NormParry;\n      }\n      else {\n        fightChoice = FightChoice.CritParry;\n      }\n    }\n\n    if(fightChoice !== null) {\n      const critsAfterParry = chooser.crits - (fightChoice === FightChoice.CritParry ? 1 : 0);\n      const normsAfterParry = chooser.norms - (fightChoice === FightChoice.NormParry ? 1 : 0);\n      const remainingDmg = chooser.profile.possibleDmg(critsAfterParry, normsAfterParry);\n\n      if(remainingDmg >= enemy.profile.wounds) {\n        return fightChoice;\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction wiseParry(chooser: FighterState, enemy: FighterState): FightChoice {\n  // function is only called when both chooser and enemy have successes\n\n  // use our crits to parry enemy crits; otherwise save our crits\n  // for possible strikes once all enemy successes are gone\n  if (enemy.crits > 0 && chooser.crits > 0) {\n    return FightChoice.CritParry;\n  }\n  // do a norm parry, but only if there is an enemy norm success to cancel\n  else if (chooser.norms > 0 && enemy.norms > 0) {\n    return FightChoice.NormParry;\n  }\n  // this is a CritParry of an enemy norm success\n  else if (chooser.crits > 0) {\n    return FightChoice.CritParry;\n  }\n  // remaining scenario is chooser has only norm successes and enemy has only crit successes\n  return FightChoice.NormStrike;\n}\n\nexport const exportedForTesting = {\n  FightChoice,\n  FighterState,\n  calcDieChoice,\n  calcParryForLastEnemySuccessThenKillEnemy,\n  resolveDieChoice,\n  resolveFight,\n  wiseParry,\n};","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Table from 'react-bootstrap/Table';\n\nimport * as Util from 'src/Util';\n\nexport interface Props {\n  fighterAWoundProbs: Map<number,number>;\n  fighterBWoundProbs: Map<number,number>;\n  fighterAWoundsOrig: number;\n  fighterBWoundsOrig: number;\n}\n\nconst FightResultsDisplay: React.FC<Props> = (props: Props) => {\n  return (\n    <Container>\n      <Row>Results</Row>\n      <Row>\n        <Col className='border'>\n          {makeFighterResultsSection('FighterA', props.fighterAWoundProbs, props.fighterAWoundsOrig)}\n        </Col>\n        <Col className='border'>\n          {makeFighterResultsSection('FighterB', props.fighterBWoundProbs, props.fighterBWoundsOrig)}\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nfunction makeFighterResultsSection(\n  title: string,\n  woundProbs: Map<number,number>,\n  woundsOrig: number,\n): JSX.Element {\n  const digitsPastDecimal = 2;\n  let avgWounds = Util.weightedAverage(woundProbs);\n  let avgDmg = woundsOrig - avgWounds;\n  let deathProb = woundProbs.get(0) ?? 0;\n  const tableBody: JSX.Element[] = [];\n\n  let ascendingWoundProbs = new Map<number,number>([...woundProbs.entries()].sort((a, b) => a[0] - b[0]));\n  let probCumulative = 0;\n\n  ascendingWoundProbs.forEach((prob, wounds) => {\n     const probAtLeastThisManyWounds = 1 - probCumulative;\n     probCumulative += prob;\n     const probAtMostThisManyWounds = probCumulative;\n\n     tableBody.push(\n      <tr key={wounds}>\n        <td>{wounds}</td>\n        <td>{Util.toPercentString(probAtLeastThisManyWounds)}</td>\n        <td>{Util.toPercentString(probAtMostThisManyWounds)}</td>\n        <td>{Util.toPercentString(prob)}</td>\n      </tr>);\n  });\n\n  return (\n    <Container>\n      <Row>{title}</Row>\n      <Row>\n        <Col style={{fontSize: '11px'}}>\n          DeathChance:\n        </Col>\n        <Col>\n          {Util.toPercentString(deathProb)}%\n        </Col>\n      </Row>\n      <Row>\n        <Col style={{fontSize: '11px'}}>\n          AvgRemainingWounds:\n        </Col>\n        <Col>\n          {avgWounds.toFixed(digitsPastDecimal)}\n        </Col>\n      </Row>\n      <Row>\n        <Col style={{fontSize: '11px'}}>\n          AvgDmgTaken:\n        </Col>\n        <Col>\n          {avgDmg.toFixed(digitsPastDecimal)}\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Table bordered={true} striped={true} style={{fontSize: '11px'}}>\n            <thead>\n              <tr>\n                <th>Wnds</th>\n                <th>p(&gt;=Wnds)<br />(%)</th>\n                <th>p(&lt;=Wnds)<br />(%)</th>\n                <th>p(Wnds)<br />(%)</th>\n              </tr>\n            </thead>\n            <tbody>\n              {tableBody}\n            </tbody>\n          </Table>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default FightResultsDisplay;","import FightStrategy from 'src/FightStrategy';\n\n\nexport default class FightOptions {\n  public strategyFighterA: FightStrategy;\n  public strategyFighterB: FightStrategy;\n  public firstFighter: string;\n  public numRounds: number;\n\n  public constructor() {\n    this.strategyFighterA = FightStrategy.MaxDmgToEnemy;\n    this.strategyFighterB = FightStrategy.MaxDmgToEnemy;\n    this.firstFighter = 'A';\n    this.numRounds = 1;\n  }\n}\n","import React from 'react';\nimport {\n  Col,\n  Container,\n  Row,\n} from 'react-bootstrap';\n\nimport Credits from 'src/components/Credits';\nimport * as Util from \"src/Util\";\nimport FighterControls from 'src/components/FighterControls';\nimport Attacker from 'src/Attacker';\nimport FightOptionControls from 'src/components/FightOptionControls';\nimport { calcRemainingWounds } from 'src/CalcEngineFight';\nimport FightResultsDisplay from 'src/components/FightResultsDisplay';\nimport FightOptions from 'src/FightOptions';\n\nconst FightSection: React.FC = () => {\n  const [fighterA, setFighterA] = React.useState(new Attacker());\n  const [fighterB, setFighterB] = React.useState(new Attacker());\n  const [fightOptions, setFightOptions] = React.useState(new FightOptions());\n  const aFirst = fightOptions.firstFighter === 'A';\n  const [fighter1WoundProbs, fighter2WoundProbs] = calcRemainingWounds(\n    aFirst ? fighterA : fighterB,\n    aFirst ? fighterB : fighterA,\n    aFirst ? fightOptions.strategyFighterA : fightOptions.strategyFighterB,\n    aFirst ? fightOptions.strategyFighterB : fightOptions.strategyFighterA,\n    fightOptions.numRounds,\n  );\n  const fighterAWoundProbs = aFirst ? fighter1WoundProbs : fighter2WoundProbs;\n  const fighterBWoundProbs = aFirst ? fighter2WoundProbs : fighter1WoundProbs;\n\n  return (\n    <Container style={{width: '800'}}>\n      <Row>\n        <Col className={Util.centerHoriz + ' p-0 border'}>\n          <FighterControls title=\"Fighter A\" attacker={fighterA} changeHandler={setFighterA} />\n        </Col>\n        <Col className={Util.centerHoriz + ' p-0 border'}>\n          <FighterControls title=\"Fighter B\" attacker={fighterB} changeHandler={setFighterB} />\n        </Col>\n      </Row>\n      <Row className='border'>\n        <Col className={Util.centerHoriz + ' p-0 border'}>\n          <FightOptionControls\n            fightOptions={fightOptions}\n            changeHandler={setFightOptions}\n          />\n        </Col>\n      </Row>\n      <Row className='border'>\n        <Col className={Util.centerHoriz + ' p-0 border'}>\n          <FightResultsDisplay\n            fighterAWoundProbs={fighterAWoundProbs}\n            fighterBWoundProbs={fighterBWoundProbs}\n            fighterAWoundsOrig={fighterA.wounds}\n            fighterBWoundsOrig={fighterB.wounds}\n          />\n        </Col>\n      </Row>\n      <Row>\n        <Col className={Util.centerHoriz + ' border'} style={{fontSize: '11px'}}>\n          <Credits/>\n        </Col>\n      </Row>\n      <Row>\n        <Col className={Util.centerHoriz + ' border'}>\n          <div>\n            Notes:\n            <ul>\n              <li>\n                All strategies will do certain no-downside actions, with the consequence that \n                \"Strike\" will still sometimes parry and \"Parry\" will still sometimes strike.\n                <ul>\n                  <li>If fighter can kill enemy in next strike, they will do so.</li>\n                  <li>If fighter can parry enemy's last success and still kill enemy afterwards, they will do so.</li>\n                </ul>\n              </li>\n              <li>\n                Balanced will only reroll a fail even if would be wise to reroll a normal success.\n              </li>\n            </ul>\n          </div>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default FightSection;","import React from 'react';\nimport {\n  Button,\n  Col,\n  Container,\n  Row,\n} from 'react-bootstrap';\n\nimport ShootSection from 'src/components/ShootSection';\nimport FightSection from 'src/components/FightSection';\nimport * as Util from \"src/Util\";\n\nconst App: React.FC = () => {\n  const [isShootVisible, setIsShootVisible] = React.useState(true);\n  const currMode = () => isShootVisible ? 'Shoot' : 'Fight';\n  const otherMode = () => !isShootVisible ? 'Shoot' : 'Fight';\n\n  return (\n    <Container className=\"m-0 p-0\">\n      <Row className='mb-1'>\n        <Col className={Util.centerHorizVert}>\n          {currMode()}\n          &nbsp; &nbsp;\n          <Button onClick={() => setIsShootVisible(!isShootVisible)}>Switch to {otherMode()}</Button>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <span style={{display: isShootVisible ? 'initial' : 'none'}}>\n            <ShootSection/>\n          </span>\n          <span style={{display: isShootVisible ? 'none' : 'initial'}}>\n            <FightSection />\n          </span>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'src/App';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}